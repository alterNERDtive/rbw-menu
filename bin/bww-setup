#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Creator: Robert Buchberger - robert@buchberger.cc
#
# Creates a bitwarden session key and stores it for the wrapper script.

# Configuration ----------------------------------------------------------------

session_file="${XDG_CACHE_HOME:-$HOME/.cache}/bw_session.gpg"

# Helper Functions -------------------------------------------------------------

get_master_password() {
	# Pinentry doesn't concern itself with such trivial matters as man
	# pages. No no, you need to use the far shittier 'info' command to get any
	# actual documentation (which still sucks). This is written nowhere.
	#
	# Also, who accepts arguments this way? What is this shit?
	pinentry_result=$(
		pinentry <<-EOF
			SETTITLE Bitwarden Wrapper
			SETDESC Bitwarden Wrapper - Unlock Vault
			SETPROMPT Master Password:
			GETPIN
		EOF
	)

	# First we have to fish the line we actually give a shit about from a bunch of
	# extraneous pointless bullshit
	pinentry_line=$(echo "$pinentry_result" | grep '^D')

	# THEN we have to fucking strip the pointless fucking prefix becuase I guess
	# without it we couldn't have accomplished the previous step, which WOULDN'T
	# HAVE BEEN NECESSARY IN THE FIRST PLACE IF THIS FUKCING TOOL MADE ANY SENSE
	master_pw=${pinentry_line#"D "}

	echo "$master_pw"
}

# Main Script ------------------------------------------------------------------

if ! bw login --check; then # We are not logged in.
	# Check if stdin and stdout are terminals, bail otherwise.
	{ [ -t 0 ] && [ -t 1 ]; } || {
		echo 'You need to log into bitwarden first. Please run bww-setup' >&2
		exit 1
	}

	# If we're running from a terminal, we can call bw login.
	session_key=$(bw login --raw)
else
	# Make sure we actually need to do anything
	bww unlock --check &>/dev/null && (
		echo "You already have a valid session key. No action required"
		exit
	)

	echo "Getting master password..."
	master_pw=$(get_master_password)
	[ "$master_pw" ] || exit 1

	echo "Getting session key from bw..."
	session_key=$(bw unlock --raw "$master_pw")
fi

# Bail if there's no session key.
[ "$session_key" = "" ] && exit 1

echo "Encrypting and saving session key to $session_file..."
echo "$session_key" | gpg --encrypt --default-recipient-self >"$session_file" ||
	(
		echo "Encryption failed. Do you have gpg configured?" >&2
		exit 1
	)

echo "Success!"
